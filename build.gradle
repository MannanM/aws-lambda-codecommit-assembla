import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask
import jp.classmethod.aws.gradle.lambda.AWSLambdaUpdateFunctionCodeTask
import jp.classmethod.aws.gradle.identitymanagement.AmazonIdentityManagementCreateRoleTask

// grab the AWS plugin
buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'jp.classmethod.aws:gradle-aws-plugin:0.37'
    }
}

apply plugin: 'jp.classmethod.aws.lambda'
apply plugin: 'jp.classmethod.aws.iam'

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compileOnly 'com.amazonaws:aws-lambda-java-core:1.2.0'
    compile 'com.amazonaws:aws-lambda-java-events:2.2.6'
    compile 'com.amazonaws:aws-java-sdk-codecommit:1.11.592'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.10.0'
}

jar {
    dependsOn configurations.runtime
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

aws {
    profileName = 'default'
    region = 'ap-southeast-2'
}

task createRole(type: AmazonIdentityManagementCreateRoleTask) {
    doFirst {
        roleName = 'lambda-codecommit'
        assumeRolePolicyDocument = '{"Version": "2012-10-17", "Statement": [' +
                '{"Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action":"sts:AssumeRole"}' +
                ']}'
        policyArns = [
                'arn:aws:iam::aws:policy/AWSCodeCommitReadOnly',
                'arn:aws:iam::aws:policy/AWSLambdaBasicExecutionRole'
        ]
    }
}

task createLambda(type: AWSLambdaMigrateFunctionTask, dependsOn: jar) {
    doFirst {
        role = "arn:aws:iam::${aws.accountId}:role/lambda-codecommit"
        zipFile = jar.archiveFile.get().getAsFile()
        memorySize = 256
        timeout = 60
        runtime = 'java8'
        functionName = 'codecommit-lambda'
        environment = [
                API_KEY   : '',
                API_SECRET: '',
        ]
        handler = 'com.mannanlive.CodeCommitHandler::handleRequest'
        description = 'Updates project management tool when a new push is received'
    }
}

task updateLambda(type: AWSLambdaUpdateFunctionCodeTask, dependsOn: jar) {
    doFirst {
        functionName = 'codecommit-lambda'
        zipFile = jar.archiveFile.get().getAsFile()
    }
}
